#%RAML 0.8
---
title: Penalty Box
baseUri: "http://penalty-box.yourdomain.com"
documentation:
  - title: "Penalty Box: A simple restful rate limiter"
    content: |
      Penalty box exposes an API that lets multiple service use it as a restful rate limiter. That API is documented here.

      You may also be interested in [the GitHub repository](http://github.com/gamechanger/penalty-box)
/health:
  description: Health check endpoint
  get:
    description: Returns 200 if the service is available
    responses:
      200:
        description: The Penalty Box service is available and serving requests
/rate-limit:
  description: Checks whether a request is allowed and keeps track of how often a key has been accessed
  post:
    description: |
      Post info on a request to see if request is allowed. If allowed Penalty Box appends keep track of it to enforce rate limits.
      The response body contains four values: limit, remaining, is_rate_limited, and reset. Limit value contains the rate limit for
      this apps' key. Remaining contains the number of requests left in this minute. is_rate_limited contains whether or not
      the request has hit the rate limit and should be limited. Reset contains time (epoch ms) till the rate limit is reset.
    queryParameters:
      app_name:
        type: string
        description: The name of the application using the rate limiter
        required: true
      key:
        type: string
        description: The key the application would like to rate limit
        required: true
      cost:
        type: integer
        description: How much this request should cost.  Typically each request is cost 1, but this enables weighting different requests differently
        required: true
      rate_limit:
        type: integer
        description: How many requests per minute this key should get. This is used in initial setup of the rate_limit.  Once written it will not be overwritten
        required: true
    responses:
      200:
        description: The request was allowed
        body:
          application/json:
            schema: |
              {
                "limit": 5,
                "is_rate_limited": true,
                "remaining": 3,
                "reset": 1459971222000
              }
      400:
        description: The request was missing one more more required arguments
